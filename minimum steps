/*There are three integers k,m,n. You have to convert the number k to m by performing the given operations:

Multiply k by n
 Decrease k by 2.
 Decrease k by 1.
You have to perform the above operations to convert the integer from k to m and find the minimum steps.
Sample Input          Sample Output
2                       3
3 10 2                  3
11 6 2 

For test case 1: -                                           For test case 2: 

1) First multple 3 with 2 then                                1) Subtact 2 from 11 , 2 times

2) Subtract 1 from 6 to get 5                                  2) Subtract 1 from 7.

3) Multiple 5 with 2  to get 10.                                So, 3 steps.

So, 3 steps.                                                                         */


#include<stdio.h>

int adiff(int a, int b){
	return abs(a-b);
 }

// function to find min steps to reach goal
 int minSteps(int k, int m, int n){
 	int count = 0;
 	while(k!=m){
		if(k<m){
 			if(adiff(m, k*n) <= adiff(m, k-2) && adiff(m, k*n) <= adiff(m, k-1)){
 				count++;
 				k *= n;
 			}
 			else if(adiff(m, k-2) < adiff(m, k-1) && adiff(m, k-2) < adiff(m, k*n)){
				count++;
				k -= 2; 			}
 			else{
				count++;
 				k -= 1;
 			}
 		}
 		else{
 			if(adiff(m, k-2) < adiff(m, k-1)){
 				count++;
 				k -= 2;
 			}
 			else{
 				count++;
 				k -= 1;
 			}
 		}
 	}

 	return count;/ }


int minSteps(int k, int m, int n){
	if(k>=m){
		return (k-m)/2 + (k-m)%2;
	}

	if(m%n==0){
		return 1 + minSteps(k,m/n,n);
	}
	else{
		int x;
		x = (m/n+1)*n;
		return (x-m)/2 + (x-m)%2 + minSteps(k,x,n);
	}
}

int main(){
	int num;
	scanf("%d",&num);
	while(num--){
		int k,m,n;
		scanf("%d%d%d",&k, &m, &n);
		printf("%d", (minSteps(k,m,n));
	}
	return 0;
}
